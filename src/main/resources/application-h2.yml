spring:
  datasource:
    url: jdbc:h2:tcp://localhost:9092/~/h2db/madness;MODE=PostgreSQL;LOCK_TIMEOUT=60000;DB_CLOSE_DELAY=-1
    driver-class-name: org.h2.Driver
    username: sa
    password:
    hikari:
      maximum-pool-size: 1
      minimum-idle: 1

  jpa:
    database-platform: org.hibernate.dialect.H2Dialect
    hibernate:
      ddl-auto: update
    # 스키마 초기화를 한 템포 늦춰서 H2 서버가 먼저 뜨도록(선택)
    defer-datasource-initialization: true

  task:
    scheduling:
      pool:
        size: 1

  h2:
    console:
      enabled: true
      path: /h2-console

jwt:
  secret: sr4pAFdtvtGl2DG3CfKnikpSRaXPf0S7aKkLUsbkJic=
  access-exp-ms: 900000
  refresh-exp-sec: 1209600

app:
  h2:
    tcp:
      enabled: true
  cookie:
    secure: false
    sameSite: Lax
    domain: ""

live-rollup:
  batch-size: 1
  sql:
    upsert-update: >
      UPDATE channel_live_rollup
         SET live_count = :liveCount
       WHERE public_id = :publicId
         AND snap_at   = :snapAt
    upsert-insert: >
      INSERT INTO channel_live_rollup (public_id, live_count, snap_at)
      SELECT :publicId, :liveCount, :snapAt
      WHERE NOT EXISTS (
        SELECT 1 FROM channel_live_rollup
         WHERE public_id = :publicId AND snap_at = :snapAt
      )
    delete-stale: >
      DELETE FROM channel_live_rollup WHERE snap_at < :snapAt
